/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.2).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Pony;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-12-02T22:26:12.093+01:00[Europe/Paris]")

@Validated
@Api(value = "ponies", description = "the ponies API")
public interface PoniesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Create", nickname = "create", notes = "", response = Pony.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Status 201", response = Pony.class),
        @ApiResponse(code = 400, message = "Status 400") })
    @RequestMapping(value = "/ponies",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Pony> create(@ApiParam(value = ""  )  @Valid @RequestBody Pony pony) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Color\" : \"RED\", \"CreatedAt\" : 0, \"Id\" : \"Id\", \"Name\" : \"Big McIntosh\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Delete one", nickname = "deleteOne", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Status 200") })
    @RequestMapping(value = "/ponies/{ponyId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteOne(@ApiParam(value = "",required=true) @PathVariable("ponyId") String ponyId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get one", nickname = "getOne", notes = "", response = Pony.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Status 200", response = Pony.class) })
    @RequestMapping(value = "/ponies/{ponyId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Pony> getOne(@ApiParam(value = "",required=true) @PathVariable("ponyId") String ponyId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Color\" : \"RED\", \"CreatedAt\" : 0, \"Id\" : \"Id\", \"Name\" : \"Big McIntosh\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "List", nickname = "list", notes = "", response = Pony.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Status 200", response = Pony.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Status 400") })
    @RequestMapping(value = "/ponies",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Pony>> list(@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Color\" : \"RED\", \"CreatedAt\" : 0, \"Id\" : \"Id\", \"Name\" : \"Big McIntosh\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Update", nickname = "update", notes = "", response = Pony.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Status 200", response = Pony.class) })
    @RequestMapping(value = "/ponies/{ponyId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Pony> update(@ApiParam(value = "",required=true) @PathVariable("ponyId") String ponyId,@ApiParam(value = ""  )  @Valid @RequestBody Pony pony) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Color\" : \"RED\", \"CreatedAt\" : 0, \"Id\" : \"Id\", \"Name\" : \"Big McIntosh\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
